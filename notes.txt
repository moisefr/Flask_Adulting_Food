General
Libraries
OS - helps me create and access files from the directory that the code sits on or the computers directory
flask - major framework handles RESTful API architecture with request, response, template rendering
pymango - MongoDB library with python
json - formats dictionary data to json
bson.objectID - 🧐learn more
secure file name werkzeug.utils - helps encode your file names as you save them
wtforms - Flask forms library that helps with filed validation and Form object mapping
try except in python is like try catch in node.JS 
    we attempy an action if that attempt fails we throw an exception and inform the user why
you need to connect to the DB via the pymongo MongoClient
    connection string you get from MongoDb collection set up
    use client boiler plate code
    set db to the main collection you're using for the project

File uploads 😥😐😑 this is where OS and request.files is clutch
1. Create a directory called uploads with an if not tree
2. set app config upload folder to uploads variable
3. the trick is to render the upload template and pass on the key id so a picture can go with the id
4. You also need to make the upload image part of the form a setperate route on the multi part form because 
    text input gets one post request
    then you need another post request for the image input
        this post then redirects to the upload/id endpoint
        This is where you learned what the action keyword of an html form does
            it redirects the form data to a given endpoint once you submit
            we want this endpoint to be the same endpoint that deals with file uploads
            http://localhost:5000/upload/{{id}} => double curly brace jinja syntax for the win!
        Now I want to associate each image upload to an ID so when you save the file you want to append the id to the file.name
        secure_filename(id + "-" + f.filename)
    Now I want to write the new name of the image in the static folder back to the img_uri attribute of the key model
        use os.chdir to switch to the uploads directory
        slice through all files in the directory, match it against an img search variable
        im search is just a python string slide, for the id part of the file name
        if that matches the incoking id, then do a put/update action against the database
        to upload the im_URI attribute!!!
    Finally we want to render those images, not so straight forward, need to use url for under default static folder 
        then pass on the file name that should be saved to URI attributes
        <img src={{ url_for('static', filename=ingredient.img_URI) }} alt=”Bananas”  width="60" height="60">


11/18/21

<!-- Profile DropDown -->
            <!-- <div class="dropdown">
                <a class=" dropdown-toggle" style="color:rgba(255, 255, 255, 0.55)" id="dropdownMenuLink"
                   data-bs-toggle="dropdown" aria-expanded="false">
                    UserID: {{g.user.profile.firstName}}
                </a>

                <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                    <li><a class="dropdown-item" href="{{url_for('userprofile')}}">Profile</a></li>
                   

                </ul>
            </div> -->

OKTA Claims:
dict_keys(['sub', 'name', 'locale', 'email', 'preferred_username', 'given_name', 'family_name', 'zoneinfo', 'updated_at', 'email_verified'])

Krogger Location called{"data":[{"locationId":"09790273","chain":"BP","address":{"addressLine1":"3608 W CHESTER PIKE","city":"NEWTOWN SQUARE","state":"PA","zipCode":"19073"},"geolocation":{"latitude":39.986509,"longitude":-75.400145,"latLng":"39.986509,-75.400145"},"name":"BP","departments":[{"departmentId":"10","name":"Gas Station"}]}],"meta":{"pagination":{"start":1,"limit":1,"total":1}}}

{"data":[
    {"locationId":"09790273","chain":"BP","address":{"addressLine1":"3608 W CHESTER PIKE","city":"NEWTOWN SQUARE","state":"PA","zipCode":"19073"},"geolocation":{"latitude":39.986509,"longitude":-75.400145,"latLng":"39.986509,-75.400145"},"name":"BP","departments":[{"departmentId":"10","name":"Gas Station"}]},
    {"locationId":"70200835","chain":"JEWELRY","address":{"addressLine1":"502 Christiana Mall","city":"Newark","state":"DE","zipCode":"19702","county":"NEW CASTLE COUNTY"},"geolocation":{"latitude":39.678008,"longitude":-75.652355,"latLng":"39.678008,-75.652355"},"name":"Littman Jewelers - Christiana Mall","hours":{"timezone":"America/New_York","gmtOffset":"(UTC-05:00) Eastern Time (US Canada)","open24":false,"monday":{"open":"10:00","close":"21:00","open24":false},"tuesday":{"open":"10:00","close":"21:00","open24":false},"wednesday":{"open":"10:00","close":"21:00","open24":false},"thursday":{"open":"10:00","close":"21:00","open24":false},"friday":{"open":"10:00","close":"21:00","open24":false},"saturday":{"open":"10:00","close":"21:00","open24":false},"sunday":{"open":"11:00","close":"18:00","open24":false}},"phone":"3023667555"},{"locationId":"70200869","chain":"JEWELRY","address":{"addressLine1":"4403 Black Horse Pike #1096","city":"Mays Landing","state":"NJ","zipCode":"08330","county":"ATLANTIC COUNTY"},"geolocation":{"latitude":39.453913,"longitude":-74.643055,"latLng":"39.453913,-74.643055"},"name":"Littman Jewelers - Hamilton Mall","hours":{"timezone":"America/New_York","gmtOffset":"(UTC-05:00) Eastern Time (US Canada)","open24":false,"monday":{"open":"10:00","close":"21:00","open24":false},"tuesday":{"open":"10:00","close":"21:00","open24":false},"wednesday":{"open":"10:00","close":"21:00","open24":false},"thursday":{"open":"10:00","close":"21:00","open24":false},"friday":{"open":"10:00","close":"21:00","open24":false},"saturday":{"open":"10:00","close":"21:00","open24":false},"sunday":{"open":"11:00","close":"18:00","open24":false}},"phone":"6096419111"},{"locationId":"70200931","chain":"JEWELRY","address":{"addressLine1":"132 Palmer Park Mall","city":"Easton","state":"PA","zipCode":"18045","county":"NORTHAMPTON COUNTY"},"geolocation":{"latitude":40.696598,"longitude":-75.258791,"latLng":"40.696598,-75.258791"},"name":"Littman Jewelers - Palmer Park Mall","hours":{"timezone":"America/New_York","gmtOffset":"(UTC-05:00) Eastern Time (US Canada)","open24":false,"monday":{"open":"10:00","close":"21:00","open24":false},"tuesday":{"open":"10:00","close":"21:00","open24":false},"wednesday":{"open":"10:00","close":"21:00","open24":false},"thursday":{"open":"10:00","close":"21:00","open24":false},"friday":{"open":"10:00","close":"21:00","open24":false},"saturday":{"open":"10:00","close":"21:00","open24":false},"sunday":{"open":"11:00","close":"18:00","open24":false}},"phone":"6102537465"},
    {"locationId":"09790443","chain":"BP","address":{"addressLine1":"1001 PULASKI HWY","city":"HAVRE DE GRACE","state":"MD","zipCode":"21078"},"geolocation":{"latitude":39.54622,"longitude":-76.10734,"latLng":"39.54622,-76.10734"},"name":"BP","departments":[{"departmentId":"10","name":"Gas Station"}]}],"meta":{"pagination":{"start":1,"limit":5,"total":5}}}


    <form method="POST"  action="">
    <div class="form-group">
        <div class="col"><input type="search" placeholder="Search" aria-label="Search" name = "dasearch"></div>
    </div>
    <!-- <div class="form-group">
      <label for="ingredients">Search for Ingredient</label>
      <input list="ingredients" name="ingredients" id="ingredients">
      <datalist id="ingredients">
        {% for ingredient in ingredients % }
          <option value="{{ingredients.title}}">
          <option value="{{ingredients.state}}">
          <option value="{{ingredients.type}}">
        {% endfor % }
      </datalist> 
    </div> -->
    <p><input type="submit" class="btn btn-primary" value="Submit"></p>
  </form>


  div id = "draggable" class = "ui-widget-content"



  SQL switch
  Example form Response
  {'ingredient_Pink Atlantic Salmon': 'on', 'quantity_Pink Atlantic Salmon': '1', 'unit_Pink Atlantic Salmon': 'lb', 
  'price_Pink Atlantic Salmon': '2.2', 'ingredient_cheddar cheese': 'on', 'quantity_cheddar cheese': '1', 'unit_cheddar cheese': 'lb', 
  'price_cheddar cheese': '2.2', 'ingredient_tomato sauce': 'on', 'quantity_tomato sauce': '4', 'unit_tomato sauce': 'oz', 
  'price_tomato sauce': '2.2', 'ingredient_soft taco shell': 'on', 'quantity_soft taco shell': '12', 'unit_soft taco shell': 'of them', 
  'price_soft taco shell': '2.2', 'ingredient_Garlic': 'on', 'quantity_Garlic': '12', 'unit_Garlic': 'of them', 'price_Garlic': '2.2', 
  'ingredient_sweet onion': 'on', 'quantity_sweet onion': '3', 'unit_sweet onion': 'of them', 'price_sweet onion': '2.2', 'ingredient_Green Bell Pepper': 'on', 
  'quantity_Green Bell Pepper': '4', 'unit_Green Bell Pepper': 'of them', 'price_Green Bell Pepper': '2.2', 'ingredient_Beef Broth': 'on', 'quantity_Beef Broth': '1', 
  'unit_Beef Broth': 'L', 'price_Beef Broth': '2.2', 'ingredient_Ground Beef': 'on', 'quantity_Ground Beef': '1', 'unit_Ground Beef': 'lb', 'price_Ground Beef': '2.2', 
  'ingredient_ground turkey': 'on', 'quantity_ground turkey': '1', 'unit_ground turkey': 'lb', 'price_ground turkey': '2.2', 'ingredient_maggi cube': 'on', 'quantity_maggi cube': '3', 
  'unit_maggi cube': 'of them', 'price_maggi cube': '2.2', 'ingredient_Ginger Root': 'on', 'quantity_Ginger Root': '3', 'unit_Ginger Root': 'g', 'price_Ginger Root': '2.2', 
  'ingredient_cinnamon sticks': 'on', 'quantity_cinnamon sticks': '3', 'unit_cinnamon sticks': 'of them', 'price_cinnamon sticks': '2.2', 'ingredient_Sazon': 'on', 'quantity_Sazon': '3', 
  'unit_Sazon': 'of them', 'price_Sazon': '2.2', 'ingredient_maggi beef bouillon': 'on', 'quantity_maggi beef bouillon': '2', 'unit_maggi beef bouillon': 'of them', '
  price_maggi beef bouillon': '2.2', 'ingredient_parika': 'on', 'quantity_parika': '5', 'unit_parika': 'g', 'price_parika': '2.2', 'ingredient_Star Anise': 'on', 'quantity_Star Anise': '3', 'unit_Star Anise': 'of them', 
  'price_Star Anise': '2.2', 'ingredient_goya bouillon solid': 'on', 'quantity_goya bouillon solid': '1', 'unit_goya bouillon solid': 'of them', 'price_goya bouillon solid': '2.2', 'ingredient_Red RockEye Salmon': 'on', 'quantity_Red RockEye Salmon': '2', 'unit_Red RockEye Salmon': 'lb', 'price_Red RockEye Salmon': '2.2', 'ingredient_Boneless Skinless Chicken Thighs': 'on', 'quantity_Boneless Skinless Chicken Thighs': '1', 'unit_Boneless Skinless Chicken Thighs': 'lb', 'price_Boneless Skinless Chicken Thighs': '2.2', 'ingredient_ground black pepper': 'on', 'quantity_ground black pepper': '10', 'unit_ground black pepper': 'g', 'price_ground black pepper': '2.2', 'ingredient_salt': 'on', 'quantity_salt': '1', 'unit_salt': 'g', 'price_salt': '2.2'}


<div class="input-group mb-3">
  <div class="input-group-prepend">
    <div class="input-group-text">
      <input type="checkbox" aria-label="Checkbox for following text input">
    </div>
  </div>
  <input type="text" class="form-control" aria-label="Text input with checkbox">
</div>


return Response(
                    response = json.dumps(
                            {"message": "Unable to Create Groccery List"
                            }),
                        status = 400,
                        mimetype='application/json'
                )


<div class="accordion accordion-flush" id="accordionFlushExample">
      <div class="accordion-item">
      <h2 class="accordion-header" id="flush-heading{{type}}">
          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-{{type}}" aria-expanded="false" aria-controls="flush-collapseOne">
          Ingredients
          </button>
      </h2>
      <div id="flush-{{type}}" class="accordion-collapse collapse" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">
          <div class="accordion-body">
              
                            {%for ingredient in ingredients%}
                             
                          {%endfor%}
                         
                  </div>
              </div>
      </div>
      </div>
      </div>
  {%endfor%}
  
  </div>



  <div class="container">
    <h3>Popover Example</h3>
    <button type="button" class="btn btn-lg btn-danger" id = "example-popover" data-toggle="popover" title="Popover title" data-content="And here's some amazing content. It's very engaging. Right?">Click to toggle popover</button>
</div>

<script>
    $(function () {
        var frame = '';

        $('#example-popover').popover({
          container: 'body',
          html: true,
          content: '<p/>Hi'
        })
      })
</script>

Old instructions
$(function(){
    var counter = 0;
    var prelim_instruction;
    // window.onload($(function(){
    //     $("#instruction_raw").prepend("Drag Each List Item in order of instruction");
    // }))
    // Insturction Generator
    $("#inst_button").click(function(e){
        value = $("#input-holder").val()
        new_input = "<li id ='prelim_instruction'>" + value +"</li>"
        $("#instruction_raw").append(new_input);
        // Draggable Instructions
        $("li").draggable({
            cursor: "move",
            drag: function( event, ui ) {
                prelim_instruction = $(this).text();
                $(this).css({
                    "background-color": "yellow", 
                    "font-size": "125%",
                    "list-style-type": "none",
                    "width": "10%",
                    "height":" 35px"
                });
             }
        });
        e.preventDefault()
      });
    //  Form Landing Sites
    $("#outer-grid").hover(function(){
        counter = counter + 1;
        $(".Order-Prep").append("<div class= 'form-group'><h2><label for ='hold'>"+counter+"</label><input type='text' style='display:none' name='hold'></h2></div>");
        $(".Landing-Prep").append("<div class= 'form-group'><h4><input style='font-size:x-large' type='text' name='prep" +counter+"'"+"></h4></div>");
        $(".Order-Execution").append("<div class= 'form-group'><h2><label for ='hold'>"+counter+"</label><input type='text' style='display:none' name='hold'></h2></div>");
        $(".Landing-Execution").append("<div class= 'form-group'><h4><input  type='text' style='font-size:x-large' name='execution" +counter+"'"+"></h4></div>");
        $("input").droppable({
            activeClass: "active",
            hoverClass:  "hover",
            drop: function( event, ui ) {
               $( this ).addClass( "ui-state-highlight" );
               $( this ).addClass( "ui-widget-header" );
               $( this ).val(prelim_instruction);
            }
         });
    });
    var submit = document.getElementById('submit');
    var form = document.getElementByName('updates');
    $(submit).click(function(e){
        $(form).submit()
    })
    // jQuery methods go here...
    // $("#inner-grid").droppable()
});


for (i = 0; i <rows.length; i++){
      columns = rows[i].getElementsByTagName("td");
      for (j = 0; j <columns.length-3; j++){
        cell_value = columns[j].textContent;
        if (!(cell_value.indexOf(filter) > -1) ){
          rows[i].style.display = "none";
        } else {
          rows[i].style.display = " ";
        }
      }

      gunicorn --certfile cert.pem --keyfile key.pem -b 0.0.0.0:8000 hello:app


      Creating app... done, ⬢ glacial-wave-20065
https://glacial-wave-20065.herokuapp.com/ | https://git.heroku.com/glacial-wave-20065.git
web: python server.py $PORT